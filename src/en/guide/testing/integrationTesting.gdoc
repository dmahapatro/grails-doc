Integration tests differ from unit tests in that you have full access to the Grails environment within the test. You can create an integration test using the [create-integration-test|commandLine] command:

{code}
$ grails create-integration-test Example
{code}

The above command will create a new integration test at the location @src/integration-test/groovy/<PACKAGE>/ExampleSpec.groovy@.

Grails uses the test environment for integration tests and loads the application prior to the first test run. All tests use the same application state.

h4. Transactions

Integration tests run inside a database transaction by default, which is rolled back at the end of the each test. This means that data saved during a test is not persisted to the database (which is shared across all tests). The default generated integration test template includes the [Rollback|api:grails.transaction.Rollback] annotation:

{code}
import grails.test.mixin.integration.Integration
import grails.transaction.*
import spock.lang.*

@Integration
@Rollback
class @artifact.name@Spec extends Specification {

    ...

    void "test something"() {
        expect:"fix me"
            true == false
    }
}
{code}

The @Rollback@ annotation ensures that each test methods runs in a transaction that is rolled back. Generally this is desirable because you do not want your tests depending on order or application state.

If you do have a series of tests that will share state you can remove the @Rollback@ and the last test in the suite should feature the [DirtiesContext|api:org.springframework.test.annotation.DirtiesContext] annotation which will shutdown the environment and restart it fresh (note that this will have an impact on test run times).

h4. Autowiring

To obtain a reference to a bean you can use the [Autowired|api:org.springframework.beans.factory.annotation.Autowired] annotation. For example:

{code}
...
import org.springframework.beans.factory.annotation.*

@Integration
@Rollback
class @artifact.name@Spec extends Specification {

    @Autowired
    ExampleService exampleService
    ...

    void "Test example service"() {
        expect:
            exampleService.countExamples() == 0
    }
}
{code}


h4. Testing Controllers

To integration test controllers it is recommended you use [create-functional-test|commandLine] command to create a Geb functional test. See the following section on functional testing for more information.
