Although Grails [controllers|guide:controllers] support fine grained interceptors, these are only really useful when applied to a few controllers and become difficult to manage with larger applications.

To solve this you can create standalone Interceptors using the [create-interceptor|commandLine] command:

 {code}
 $ grails create-interceptor MyInterceptor
 {code}

The above command will create an Interceptor in the @grails-app/controllers@ directory with the following default contents:

{code}
 class MyInterceptor {

  boolean before() { true }

  boolean after() { true }

  void afterView() {
    // no-op
  }

}
{code}

h4. Interceptors vs Filters

In versions of Grails prior to Grails 3.0, Grails supported the notion of filters. These are still supported for backwards compatibility but are considered deprecated.

The new interceptors concept in Grails 3.0 is superior in a number of ways, most significantly interceptors can using Groovy's @CompileStatic@ annotation to optimize performance (something which is often critical as interceptors can be executed for every request.)
